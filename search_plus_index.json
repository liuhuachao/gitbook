{"./":{"url":"./","title":"Introduction","keywords":"","body":"GitBook 简明教程 本教程主要围绕 GitBook 的安装，使用，集成，书籍发布，个性化以及实用插件几个方面。 其中借鉴了一些官方的文档以及在互联网上找到的一些内容，主要结合个人经验写成。由于经验有限，难免存在诸多疏漏或者理解不到位的地方，还请斧正！ 本书发布在 http://www.liuhuachao.com/gitbook。 注意：由于我已经很久没有使用 GitBook 了，GitBook 更新非常快，所以教程中提到的一些插件很可能已经不能正常使用了，特别是 multipart 插件。 "},"introduction/":{"url":"introduction/","title":"简介","keywords":"","body":"简介 Modern book format and toolchain using Git and Markdown 这是 gitbook 项目主页上对 gitbook 的定义。 gitbook 首先是一个软件，正如上面定义的那样，它使用 Git 和 Markdown 来编排书本，如果用户没有听过 Git 和 Markdown，那么 gitbook 可能不适合你！ 本书也是使用 gitbook 生成，所以在看到这里的时候，你应该对 gitbook 的魔力有了初步印象！ "},"installation/":{"url":"installation/","title":"安装","keywords":"","body":"安装 gitbook 的安装非常简单，详细指南可以参考 gitbook 文档。 这里的安装只需要一步就能完成！ $ npm install gitbook-cli -g 需要注意的是：用户首先需要安装 nodejs，以便能够使用 npm 来安装 gitbook。 "},"basic-usage/":{"url":"basic-usage/","title":"使用","keywords":"","body":"基本使用 gitbook 的基本用法非常简单，基本上就只有两步： 使用 gitbook init 初始化书籍目录 使用 gitbook serve 编译书籍 下面将结合一个非常简单的实例，来介绍 gitbook 的基本用法。 gitbook init 首先，创建如下目录结构： $ tree book/ book/ ├── README.md └── SUMMARY.md 0 directories, 2 files README.md 和 SUMMARY.md 是两个必须文件，README.md 是对书籍的简单介绍： $ cat book/README.md # README This is a book powered by [GitBook](https://github.com/GitbookIO/gitbook). SUMMARY.md 是书籍的目录结构。内容如下： $ cat book/SUMMARY.md # SUMMARY * [Chapter1](chapter1/README.md) * [Section1.1](chapter1/section1.1.md) * [Section1.2](chapter1/section1.2.md) * [Chapter2](chapter2/README.md) 创建了这两个文件后，使用 gitbook init，它会为我们创建 SUMMARY.md 中的目录结构。 $ cd book $ gitbook init $ tree . ├── README.md ├── SUMMARY.md ├── chapter1 │ ├── README.md │ ├── section1.1.md │ └── section1.2.md └── chapter2 └── README.md 2 directories, 6 files 注意：在我的实验中，gitbook init 只支持两级目录！ gitbook serve 书籍目录结构创建完成以后，就可以使用 gitbook serve 来编译和预览书籍了： $ gitbook serve Press CTRL+C to quit ... Live reload server started on port: 35729 Starting build ... Successfully built! Starting server ... Serving book on http://localhost:4000 gitbook serve 命令实际上会首先调用 gitbook build 编译书籍，完成以后会打开一个 web 服务器，监听在本地的 4000 端口。 现在，可以用浏览器打开 http://127.0.0.1:4000 查看书籍的效果，如下图： 现在，gitbook 为我们创建了书籍目录结构后，就可以向其中添加真正的内容了，文件的编写使用 markdown 语法，在文件修改过程中，每一次保存文件，gitbook serve 都会自动重新编译，所以可以持续通过浏览器来查看最新的书籍效果！ 另外，用户还可以下载 gitbook 编辑器，做到所见即所得的编辑，如下图所示： gitbook editor 的使用非常简单，这里不再介绍！ "},"gitbook.com/":{"url":"gitbook.com/","title":"GitBook.com","keywords":"","body":"GitBook.com GitBook.com 是一个围绕 gitbook 发行书籍的社区，于 2014 年初创，GitBook.com 提供免费和付费的服务，而且免费账户就可以享受诸多服务，包括： 1 本私有书籍 托管不限数量的公开书籍 售卖不限数量的书籍，并分享 80% 的书籍收入 不限数量的协作者 免费的在线书籍编辑器 对于普通用户来说，免费账号就已经够用，因为虽然限制为 1 本私有书籍，但是并没有限制书籍的大小，所以对于个人的学习笔记来说非常合适，用户甚至可以将所有知识归类放入一本私有书籍中！当然，GitBook.com 限制私有书籍数量但不限公开书籍数量的政策，显然是鼓励用户能够共享知识！ "},"gitbook.com/newbook.html":{"url":"gitbook.com/newbook.html","title":"新建书籍","keywords":"","body":"新建书籍 要使用 GitBook.com 来托管你的书籍，首先需要注册一个账号，免费注册后，用户也可以选择升级为付费用户，享受更多的服务！ 登陆 GitBook.com 后，在用户页面，可以管理现有书籍以及创建新的书籍，如下图： 点击 \"+ Create a new book\" 后，跳转到新建书籍页面，如下图： 目前有 4 中书籍主题可以选择，这里以默认的 Basic 主题为例，输入书籍名字后，点击 \"Create book\"，完成书籍的创建。 创建完成后，就会进入书籍属性页面，如下图所示： 这里可以进行对书籍的各个属性进行配置，例如： 编辑书籍（Edit Book） 书籍主题（Theme） 绑定 GitHub（GitHub） 绑定域名（Domain Names） 等。 以上几个配置将在后面介绍，其它的配置比较简单，请读者自行探索！ "},"gitbook.com/edit.html":{"url":"gitbook.com/edit.html","title":"编辑书籍","keywords":"","body":"编辑书籍 在创建了书籍后，可以使用免费的在线编辑器进行编辑，也可以使用 gitbook editor 编辑，甚至使用任何喜欢的文本编辑器来编辑，例如：Vim。 在线编辑 进入到书籍的属性页面后，点击 \"Edit Book\" 按钮即可打开在线编辑器。 GitBook 的在线编辑器对于国内用户来说，很可能不能访问，所以最好还是下载 gitbook editor 到本地，安装后使用，或者使用自己喜欢的文本编辑器直接编辑。 gitbook editor gitbook editor 实际上就是一个本地应用版的在线编辑器，使用方式和在线编辑器类似，所见即所得，这里不再介绍，读者可以参考 gitbook 使用 中的内容。 Git & Markdown 另一种方式，是直接使用文本编辑器，编写 Markdown 文档，然后，使用 Git 提交到书籍的远程项目，当然，提交前，最好在本地使用 gitbook 预览效果；提交后，GitBook.com 会自动生成更新书籍的内容。 克隆书籍源代码 GitBook.com 上的每本书都使用 Git 项目来管理，所以，这里首先需要克隆需要编辑书籍的 Git 项目，登陆 GitBook.com 后，跳转到书籍的属性页面，如下图所示： 点击 \"Edit Book\" 上方的 \"learn more\"，将会展现此书籍的 Git 项目地址，以及简单的使用方法，如下图所示： 使用如下命令，克隆书籍的源代码： $ git clone https://git.gitbook.com/chengweiv5/test.git Cloning into 'test'... remote: Counting objects: 28, done. remote: Compressing objects: 100% (17/17), done. remote: Total 28 (delta 6), reused 28 (delta 6) Unpacking objects: 100% (28/28), done. Checking connectivity... done. $ cd test/ $ ls README.md SUMMARY.md $ git log --oneline 07bde6c Cleanup example 6d368db Add _book to gitignore 20779f5 Add explanation in README.md 1b5b1a6 Create chapter-1/ARTICLE1.md 77b1858 Add help message in SUMMARY.md 210e3fe Create chapter-1/README.md 5570112 Create SUMMARY.md 2a8a0c3 Initial commit 可以看到，创建好的书籍默认已经创建了一些内容，但是这些内容是还没有发布的，所以其它人不能阅读！ 编辑内容 现在，可以参考 gitbook 使用 中的内容来编辑书籍内容，使用 gitbook init, gitbook serve 来预览，完成后，可以提交修改： $ git commit -asm \"init book\" 发布内容 最后，提交到远程 Git 项目： $ git push Counting objects: 3, done. Delta compression using up to 4 threads. Compressing objects: 100% (3/3), done. Writing objects: 100% (3/3), 362 bytes | 0 bytes/s, done. Total 3 (delta 1), reused 0 (delta 0) To https://git.gitbook.com/chengweiv5/test.git 07bde6c..b6a8b3f master -> master 阅读书籍 提交到 GitBook.com 后，书籍就自动发布了，用户就可以通过书籍的地址访问了，例如：http://chengweiv5.gitbooks.io/test/ 点击 \"READ\" 按钮，就可以阅读书籍的内容了，如下图所示： "},"gitbook.com/config.html":{"url":"gitbook.com/config.html","title":"配置书籍","keywords":"","body":"配置书籍 每本书籍都有一个属性页面，可以配置书籍的各方面属性，接下来将介绍以下几个方面的配置： 书籍主题 GitHub 集成 绑定域名 其它方面的配置比较简单，请读者自行摸索！ "},"gitbook.com/config/theme.html":{"url":"gitbook.com/config/theme.html","title":"书籍主题","keywords":"","body":"书籍主题 GitBook.com 上的书籍可以自由配置主题，首先进入书籍的属性页面，下拉页面找到 \"Theme\" 图标，如下图所示： 点击 \"Theme\" 后，出现主题选择页面，目前提供了 4 种可选主题，用户可以选择其中一种作为书籍的主题，如下图所示： 最后，点击 \"Save\" 按钮，保存即可！ "},"gitbook.com/config/github.html":{"url":"gitbook.com/config/github.html","title":"GitHub 集成","keywords":"","body":"GitHub 集成 GitBook.com 为每本书籍都创建了一个 Git 项目，并且使用这个 Git 项目来管理书籍源码（注意：这里的源码是指所有用户提交的内容）。正如在 编辑书籍 中介绍的那样，我们可以通过向书籍的 Git 项目提交内容来更新书籍。 另外，GitBook.com 还可以集成 GitHub，所以用户可以将书籍的源码通过 GitHub 上的项目来管理，这样可以使用 GitHub 带来的各种优点，例如： 其它用户可以 fork 用户可以点赞，获得更新提醒 用户可以贡献自己的内容 等等。 这里，接着之前的实例，将使用 GitHub 中的项目来替代 GitBook.com 上的项目 https://git.gitbook.com/chengweiv5/test.git。 使用 GitHub 上的项目 首先，将书籍的 Git 项目设置为 GitHub 上的项目，进入书籍属性页面，找到 \"GitHub\" 图标，如下图： 输入将要使用的 GitHub 上的项目，注意是公开的项目，如下图： 保存后，可以看到之前不可点击的 \"Add a deployment webhook\" 按钮已经可以点击了，这个按钮表示：每当用户配置的 GitHub 上的项目更新时，自动更新书籍！ 创建 GitHub 项目 假设上面配置的 GitHub 中的项目并不存在，那么，首先，登陆 GitHub，然后创建一个 test 项目，如下图所示： 导入代码 现在，将书籍原来的 Git 项目内容导入到新建的 GitHub 中的项目中，假设已经将 https://git.gitbook.com/chengweiv5/test.git 项目克隆到了 test 目录： $ cd test $ git remote add github https://github.com/chengweiv5/test.git $ git push -u github master Counting objects: 31, done. Delta compression using up to 4 threads. Compressing objects: 100% (26/26), done. Writing objects: 100% (31/31), 6.58 KiB | 0 bytes/s, done. Total 31 (delta 7), reused 0 (delta 0) To https://github.com/chengweiv5/test.git * [new branch] master -> master Branch master set up to track remote branch master from github. git push 命令中的 -u 表示将本地 master 分支的上游分支设置为 github/master，所以以后修改了本地 master 分支后，git push 将推送到 github 上，而非原来的 https://git.gitbook.com/chengweiv5/test.git。 更新书籍 现在，可以通过提交变更到 GitHub 项目中来更新书籍了，例如： $ git diff diff --git a/README.md b/README.md index e7b10b8..c776a52 100644 --- a/README.md +++ b/README.md @@ -2,3 +2,5 @@ GitBook Example ======= Welcome in your GitBook! + +Hello from GitHub! $ git commit -asm \"hello from github\" [master d985a79] hello from github 1 file changed, 2 insertions(+) $ git push Counting objects: 3, done. Delta compression using up to 4 threads. Compressing objects: 100% (3/3), done. Writing objects: 100% (3/3), 392 bytes | 0 bytes/s, done. Total 3 (delta 0), reused 0 (delta 0) To https://github.com/chengweiv5/test.git b6a8b3f..d985a79 master -> master "},"gitbook.com/config/domain.html":{"url":"gitbook.com/config/domain.html","title":"绑定域名","keywords":"","body":"绑定域名 除了可以使用类似 http://chengweiv5.gitbooks.io/test/content/index.html 地址访问用户的书籍外，还可以为每本书绑定域名，前提是用户有自己的域名。 这里继续以 test book 为例，将其绑定到 test.chengweiyang.cn，这样，用户就可以通过新的域名访问本书！ 修改书籍的域名配置 首先，在书籍的属性页面找到 \"Domain Names\" 属性，如下图： 点击 \"Domain Names\"，进入配置页面，如下图： 分别为书籍的封面和内容设置一个域名，如下图所示： 需要注意的是：这里只能是一个合法的域名，不能是域名下的某个地址，例如：chengweiyang.cn/test, chengweiyang.cn/test/content。 配置域名 将书籍的访问地址修改为个人的域名后，还需要让个人域名能够找到书籍的内容，这里参考 gitbook 文档 来配置。主要的是要为你的域名添加子域名 CNAME，并且指向 gitbook.com，然后等待域名生效，可能需要几分钟到几小时不等。 这里不再演示怎样为你的域名添加 CNAME 记录，各个域名服务商提供的工具可能不同，所以用户可以咨询域名提供商获取帮助。 验证 可以使用 nslookup 来验证是否解析成功： $ nslookup test.chengweiyang.cn Server: 10.11.50.66 Address: 10.11.50.66#53 Non-authoritative answer: test.chengweiyang.cn canonical name = www.gitbook.com. www.gitbook.com canonical name = saga-4658.herokussl.com. saga-4658.herokussl.com canonical name = elb049689-1604000308.us-east-1.elb.amazonaws.com. Name: elb049689-1604000308.us-east-1.elb.amazonaws.com Address: 23.21.177.67 Name: elb049689-1604000308.us-east-1.elb.amazonaws.com Address: 23.21.212.67 Name: elb049689-1604000308.us-east-1.elb.amazonaws.com Address: 23.21.54.142 $ nslookup content.test.chengweiyang.cn Server: 10.11.50.65 Address: 10.11.50.65#53 Non-authoritative answer: content.test.chengweiyang.cn canonical name = www.gitbook.com. www.gitbook.com canonical name = saga-4658.herokussl.com. saga-4658.herokussl.com canonical name = elb049689-1604000308.us-east-1.elb.amazonaws.com. Name: elb049689-1604000308.us-east-1.elb.amazonaws.com Address: 23.21.212.67 Name: elb049689-1604000308.us-east-1.elb.amazonaws.com Address: 23.21.54.142 Name: elb049689-1604000308.us-east-1.elb.amazonaws.com Address: 23.21.177.67 现在，将浏览器指向 http://test.chengweiyang.cn 就可以看到书籍了。 点击 \"READ\" 按钮，或者直接将浏览器指向 http://content.test.chengweiyang.cn 就可以阅读书籍内容了！ "},"customize/":{"url":"customize/","title":"个性化配置","keywords":"","body":"个性化配置 除了修改书籍的主题外，还可以通过配置 book.json 文件来修改 gitbook 在编译书籍时的行为，例如：修改书籍的名称，显示效果等等。 "},"customize/book.json.html":{"url":"customize/book.json.html","title":"book.json","keywords":"","body":"book.json gitbook 在编译书籍的时候会读取书籍源码顶层目录中的 book.js 或者 book.json，这里以 book.json 为例，参考 gitbook 文档 可以知道，book.json 支持如下配置： { // Folders to use for output // Caution: it overrides the value from the command line // It's not advised this option in the book.json \"output\": null, // Generator to use for building // Caution: it overrides the value from the command line // It's not advised this option in the book.json \"generator\": \"site\", // Book metadats (somes are extracted from the README by default) \"title\": null, \"description\": null, \"isbn\": null, // For ebook format, the extension to use for generation (default is detected from output extension) // \"epub\", \"pdf\", \"mobi\" // Caution: it overrides the value from the command line // It's not advised this option in the book.json \"extension\": null, // Plugins list, can contain \"-name\" for removing default plugins \"plugins\": [], // Global configuration for plugins \"pluginsConfig\": { \"fontSettings\": { \"theme\": \"sepia\", \"night\" or \"white\", \"family\": \"serif\" or \"sans\", \"size\": 1 to 4 } }, // Variables for templating \"variables\": {}, // Links in template (null: default, false: remove, string: new value) \"links\": { // Custom links at top of sidebar \"sidebar\": { \"Custom link name\": \"https://customlink.com\" }, // Sharing links \"sharing\": { \"google\": null, \"facebook\": null, \"twitter\": null, \"weibo\": null, \"all\": null } }, // Options for PDF generation \"pdf\": { // Add page numbers to the bottom of every page \"pageNumbers\": false, // Font size for the fiel content \"fontSize\": 12, // Paper size for the pdf // Choices are [u’a0’, u’a1’, u’a2’, u’a3’, u’a4’, u’a5’, u’a6’, u’b0’, u’b1’, u’b2’, u’b3’, u’b4’, u’b5’, u’b6’, u’legal’, u’letter’] \"paperSize\": \"a4\", // Margin (in pts) // Note: 72 pts equals 1 inch \"margin\": { \"right\": 62, \"left\": 62, \"top\": 36, \"bottom\": 36 }, //Header HTML template. Available variables: _PAGENUM_, _TITLE_, _AUTHOR_ and _SECTION_. \"headerTemplate\": null, //Footer HTML template. Available variables: _PAGENUM_, _TITLE_, _AUTHOR_ and _SECTION_. \"footerTemplate\": null } } 注意：上面的内容直接从 gitbook 文档 中复制，所以可能过期！ 首先，将这个文件放到书籍代码顶层目录中，命名为 book.json，然后编译书籍： $ gitbook build 可以看到，编译完成，使用 $ gitbook serve 然后将浏览器指向 http://127.0.0.1:4000，可以看到，什么都没有改变！ 是的，虽然这里 book.json 文件非法，但是 gitbook build 并没有报错！所以，用户需要自己准备工具来保证 book.json 必须是一个合法的 JSON 文件，并且不能含有非法配置项。 首先，删除注释项，以及空行，如果是在 vim 中，可以执行下面的命令： :%g/\\s*\\/\\//d :%g/^\\s*$/d 然后，使用 python 来检查 book.json 是否合法，同样，在 vim 中执行下面的命令： :%!python -m json.tool 很显然，下面的配置不能通过，所以删去（注：但是默认主题却是使用的这个配置！）。 \"pluginsConfig\": { \"fontSettings\": { \"theme\": \"sepia\", \"night\" or \"white\", \"family\": \"serif\" or \"sans\", \"size\": 1 to 4 } }, 最后，剩下的内容如下： { \"description\": null, \"extension\": null, \"generator\": \"site\", \"isbn\": null, \"links\": { \"sharing\": { \"all\": null, \"facebook\": null, \"google\": null, \"twitter\": null, \"weibo\": null }, \"sidebar\": {} }, \"output\": null, \"pdf\": { \"fontSize\": 12, \"footerTemplate\": null, \"headerTemplate\": null, \"margin\": { \"bottom\": 36, \"left\": 62, \"right\": 62, \"top\": 36 }, \"pageNumbers\": false, \"paperSize\": \"a4\" }, \"plugins\": [], \"title\": null, \"variables\": {} } 现在，修改一些配置，修改后为： { \"author\": \"Chengwei Yang \", \"description\": \"This is a sample book created by gitbook\", \"extension\": null, \"generator\": \"site\", \"isbn\": null, \"links\": { \"sharing\": { \"all\": null, \"facebook\": null, \"google\": null, \"twitter\": null, \"weibo\": null }, \"sidebar\": { \"Chengwei's Blog\": \"http://www.chengweiyang.cn\" } }, \"output\": null, \"pdf\": { \"fontSize\": 12, \"footerTemplate\": null, \"headerTemplate\": null, \"margin\": { \"bottom\": 36, \"left\": 62, \"right\": 62, \"top\": 36 }, \"pageNumbers\": false, \"paperSize\": \"a4\" }, \"plugins\": [], \"title\": \"Sample GitBook\", \"variables\": {} } 现在，重新编译书籍，预览效果，如下图所示： 可以看到，书籍的标题变成了 \"Sample GitBook\"，而且在左边的导航栏中添加了一个链接！ 需要注意的是：GitBook.com 上的书籍标题经试验不能通过配置 book.json 的方式修改 title，需要在书籍的属性页面中的 'Settings' 中进行修改！ "},"plugins/":{"url":"plugins/","title":"插件","keywords":"","body":"插件 gitbook 还支持许多插件，用户可以从 NPM 上搜索 gitbook 的插件，gitbook 文档 推荐插件的命名方式为： gitbook-plugin-X: 插件 gitbook-theme-X: 主题 所以，可以通过以上两种方式来搜索 gitbook 的插件或者主题。 "},"plugins/theme/":{"url":"plugins/theme/","title":"主题插件","keywords":"","body":"主题插件 虽然 gitbook 默认的主题已经非常不错，但是，还有一些非常值得推荐的主题，用户可以通过在 NPM 上搜索 gitbook-theme 来查找主题插件。 这里将分别介绍几种主题插件的使用方法，抛砖引玉！ "},"plugins/theme/comscore.html":{"url":"plugins/theme/comscore.html","title":"comscore","keywords":"","body":"ComScore ComScore 是一个彩色主题，默认的 gitbook 主题是黑白的，也就是标题和正文都是黑色的，而 ComScore 可以为各级标题添加不同的颜色，更容易区分各级标题，效果如下图所示： "},"plugins/functional/":{"url":"plugins/functional/","title":"实用插件","keywords":"","body":"实用插件 除了主题插件意外，gitbook 也有很多实用性插件，用户可以在 GitHub 或者 NPM 上搜索 gitbook-plugin 来查找。 里将介绍其中几种插件的使用，包括： disqus, 集成用户评论系统 "},"plugins/functional/disqus.html":{"url":"plugins/functional/disqus.html","title":"disqus","keywords":"","body":"Disqus Disqus 是一个非常流行的为网站集成评论系统的工具，同样，gitbook 也可以集成 disqus 以便可以和读者交流。 首先，需要在 disqus 上注册一个账号，然后添加一个 website，这会获得一个关键字，然后在集成时配置这个关键字即可。 安装 disqus 插件 可以参考 插件项目主页 来安装，命令如下： $ npm install gitbook-plugin-disqus -g 然后，修改 book.json 配置文件，添加插件的配置内容： { \"plugins\": [\"disqus\"], \"pluginsConfig\": { \"disqus\": { \"shortName\": \"introducetogitbook\" } } } 注意：上面的 shortName 的值就是你在 disqus 上创建的 website 获得的唯一关键字。 效果如下图所示： "},"plugins/functional/multipart.html":{"url":"plugins/functional/multipart.html","title":"multipart","keywords":"","body":"multipart multipart 插件可以将书籍分成几个部分，例如： GitBook Basic GitBook Advanced 对有非常多章节的书籍非常有用，分成两部分后，各个部分的章节都从 1 开始编号。 安装及配置 和安装其它插件一样，执行以下命令： $ npm install gitbook-plugin-multipart -g 然后编辑 book.json 添加 multipart 到 plugins 中： \"plugins\": [ \"multipart\" ], "},"plugins/functional/toggle-chapters.html":{"url":"plugins/functional/toggle-chapters.html","title":"toggle-chapters","keywords":"","body":"toggle-chapters toggle-chapters 插件的效果是：默认只在目录导航中显示章的标题，而不会显示小节的标题，点击每一章或者每一节会显示当前章或节的子目录，如果有的话，但是同时会收起其它之前展开的章节。所以，个人认为不是非常实用，因为这样子用户不能快速跳转到没有展开的章节！ 安装和使用非常简单，参考官方文档即可！ "},"plugins/functional/codeblock-filename.html":{"url":"plugins/functional/codeblock-filename.html","title":"codeblock-filename","keywords":"","body":"codeblock-filename codeblock-filename 可以为代码添加一个文件名，以便显示当前代码段属于的文件。 例如： print \"hello\" "},"github-pages/":{"url":"github-pages/","title":"发布到 GitHub Pages","keywords":"","body":"发布到 GitHub Pages 除了能够将书籍发布到 GitBook.com 外，还可以将书籍发布到 GitHub Pages，由于没有找到官方文档，所以这里记录的是我自己正在使用的一种方法。 如果读者不了解 GitHub Pages 为何物，简单说就是一个可以托管静态网站的 Git 项目，支持使用 markdown 语法以及 Jekyll 来构建，或者直接使用已经生成好的静态站点。详细可以参考 GitHub Pages 主页。 由于 gitbook 书籍可以通过 gitbook 本地构建出 site 格式，所以可以直接将构建好的书籍直接放到 GitHub Pages 中托管，之后，可以通过如下地址访问书籍： .github.io/ 例如：这本书中使用的例子 'test' 项目可以通过地址：chengweiv5.github.io/test 来访问。 当访问 chengweiv5.github.io/test 时，会访问 chengweiv5/test 项目的 gh-pages 分支的内容，所以需要为项目创建一个 gh-pages 分支，并且将静态站点内容放入其中。也就是说，test 项目将有如下两个分支： master, 保存书籍的源码 gh-pages, 保存书籍编译后的 HTML 文件 构建书籍 首先，使用 gitbook build 将书籍内容输出到默认目录，也就是当前目录下的 _book 目录。 $ gitbook build Starting build ... Successfully built! $ ls _book GLOSSARY.html chapter1 chapter2 gitbook glossary_index.json index.html search_index.json 创建 gh-pages 分支 执行如下命令来创建分支，并且删除不需要的文件： $ git checkout --orphan gh-pages $ git rm --cached -r . $ git clean -df $ rm -rf *~ 现在，目录下应该只剩下 _book 目录了，首先，忽略一些文件： $ echo \"*~\" > .gitignore $ echo \"_book\" >> .gitignore $ git add .gitignore $ git commit -m \"Ignore some files\" 然后，加入 _book 下的内容到分支中： $ cp -r _book/* . $ git add . $ git commit -m \"Publish book\" 上传书籍内容到 GitHub 现在，可以将编译好的书籍内容上传到 GitHub 中 test 项目的 gh-pages 分支了，虽然这里还没有创建分支，上传和创建会一步完成！ $ git push -u origin gh-pages Counting objects: 49, done. Delta compression using up to 4 threads. Compressing objects: 100% (45/45), done. Writing objects: 100% (49/49), 1.34 MiB | 131.00 KiB/s, done. Total 49 (delta 5), reused 0 (delta 0) To https://github.com/chengweiv5/test.git * [new branch] gh-pages -> gh-pages Branch gh-pages set up to track remote branch gh-pages from github. 现在，书籍的内容已经上传到 GitHub 上，所以通过访问 chengweiv5.github.io/test 就可以阅读 test 这本书了！ 注意：由于我将 chengweiv5.github.io 重定向到了个人站点 www.chengweiyang.cn，所以可以看到，浏览器中的 URL 自动变成了 www.chengweiyang.cn/test，非常 cool! 关于怎样重定向 GitHub Pages 到个人域名，请参考博客：怎样使用 GitHub Pages 搭建个人站点。 "}}